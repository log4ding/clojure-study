= 클로저의 구조

== 단순값(simple value) 및 리터럴(literal)
* 클로저의 특징
** 다른 언어와 다르게 키워드 라는 타입을 지원한다.
*** 키워드는 컬렉션인 map과 set에서 값을 가져올때 사용하기도 한다.
** 함수나 연산자를 사용할 때 괄호 다음에 바로 함수나 연산자가 먼저 오고 인수는 그 다음에 기재한다.
*** (함수 or 연산자 인수 인수)
** 평가는 괄호()를 사용한다
** 각 항목의 구분은 공백으로 한다

[source,clojure]
----
; 정수
42
;=> 42

; 실수
12.53
;=> 12.53

; 분수
1/3
;=> 1/3

; 다른 타입의 산술 연산은 허용하지 않음
4.0/2
;=> NumberFormatException Invalid number: 4.0/2

; 연산자 사용
(/ 1 3)
;=> 1/3

; 문자열
"jam"
;=> "jam"

; 키워드
:jam
;=> :jam

; 문자 한개
\j
;=> \j

; null
nil
;=> nil
----

== 클로저 데이터를 컬렉션에 담기
* 클로저의 컬렉션 종류
** 리스트
** 벡터
** 맵
** 집합(set)
* 컬렉션의 특징
** 모든 컬렉션은 불변(immutable)이고 종속적(persistent)이다.
** 컬렉션에 변경을 요청해도 새로운 컬렉션을 생성해 리턴한다는 의미

=== 리스트
* '(), (list ) 를 사용해서 선언

[source,clojure]
----
'(1 2 3 4)
;=> (1 2 3 4)

; 콤마(,)도 제공하지만 관용적으로 공백을 사용
'(1,2,3,4)
;=> (1 2 3 4)

list(1 2 3 4)
;=> (1 2 3 4)

; 여러가지 타입의 데이터를 담을 수 있다.
'(1 2 "jam" :marmalade-jar)
;=> (1 2 "jam" :marmalade-jar)
----

==== 리스트로 무엇을 할까?
* first
** 첫번째 요소 가져오기
* rest
** 첫번째 요소 제외하고 나머지 요소를 가져오기
* cons
** 리스트에 요소 추가하기
* last
** 마지막 요소 가져오기 -> 리스트에서는 성능 문제로 잘 사용되지 않는다.
* count
** 개수 가져오기

[source,clojure]
----
; first rest 혼합사용 예제
(first (rest '(:rabbit :pocket-watch :marmalade :door)))
;=> :pocket-watch

; rest 를 끝까지 사용하면??
(first(rest (rest (rest (rest '(:rabbit :pocket-watch :marmalade :door))))))
;=> nil

(cons 5 '())
;=> (5)

(cons 4 (cons 5 nil))
;=> (4 5)

(last '(1 2 3 4))
;=> 4

(count '(1 2 3 4))
;=> 4
----

=== 벡터
* 리스트와 다르게 인덱스 접근할때 유용하게 사용 가능하다.
* 마지막 인자를 접근할때 성능이 좋다.
* 함수 인자는 벡터를 사용하게 되어있다.
* [] 를 사용

* first
** 첫번째 요소 가져오기
* rest
** 첫번째 요소 제외하고 나머지 요소 가져오기
* nth
** 특정 인덱스의 요소를 가져오기
* last
** 마지막 요소 가져오기
* count
** 개수 가져오기

[source,clojure]
----
; 초기화
[:jar1 1 2 3 :jar2]
;=> [:jar1 1 2 3 :jar2]

(first [:jar1 1 2 3 :jar2])
;=> :jar1

(rest [:jar1 1 2 3 :jar2])
;=> [1 2 3 :jar2]

(nth [:jar1 1 2 3 :jar2] 0)
;=> :jar1

(last [:jar1 1 2 3 :jar2])
;=> :jar2

(count [:jar1 1 2 3 :jar2])
;=> 4
----

=== 맵
* 키-값 쌍의 데이터를 저장할 수 있다.
* {}를 사용

** get
*** keyword 를 사용해 값을 가져올수도 있다
** keys
*** key의 리스트를 리턴
** vals
*** 값의 리스트를 리턴
** assoc
*** 특정 키의 값을 갱신
** dissoc
*** 특정 키를 제거
** merge
*** 여러 맵을 합침

[source,clojure]
----
{:jam1 "strawberry" :jam2 "blackberry"}
;=> {:jam1 "strawberry", :jam2 "blackberry"}

(get {:jam1 "strawberry" :jam2 "blackberry"} :jam2)
;=> "blackberry"
; 키가 없을때
(get {:jam1 "strawberry" :jam2 "blackberry"} :jam3)
;=> "not found"

; 키를 keyword를 사용해 가져오기
(:jam2 {:jam1 "strawberry" :jam2 "blackberry"})
;=> "blackberry"

(keys {:jam1 "strawberry" :jam2 "blackberry"})
;=> (:jam1 :jam2)

(vals {:jam1 "strawberry" :jam2 "blackberry"})
;=> ("strawberry" "blackberry")

(assoc {:jam1 "strawberry" :jam2 "blackberry"} :jam3 "orange")
;=> {:jam1 "strawberry", :jam2 "blackberry", jam3 "orange"}

(dissoc {:jam1 "strawberry" :jam2 "blackberry"} :jam2)
;=> {:jam1 "strawberry"}

(merge {:jam1 "strawberry" :jam2 "blackberry"}
       {:jam1 "orange" :jam3 "red"}
       {:jam4 "blue"})
;=> {:jam1 "orange", :jam2 "blackberry", :jam3 "red", :jam4 "blue"}
----

=== 집합
* 중복이 없는 컬렉션
* #{} 를 사용해 선언

** union
*** 두개의 집합을 합침
** difference
*** 하나의 집합에서 다른 집합의 원소를 뺌
** intersection
*** 공통인 요소를 리턴
** set
*** 다른 컬렉션을 인수로 넣어 사용하면 중복을 제거할 수 있다.
** get
*** 집합에서 요소를 직접 가져오기 위해 사용
** contains
*** 집합에 요소가 있는지 체크하는 함수
** disj
*** 집합에 요소 제거

[source,clojure]
----
#{:red :blue :white :pink}
;=> #{:red :blue :white :pink}

; 집합은 중복을 허용하지 않는다.
#{:red :red :blue :white :pink}
;=> #{:red :blue :white :pink}

(clojure.set/union #{:r :b :w} #{:w :p :y})
;=> #{:r :b :w :p :y}

(clojure.set/difference #{:r :b :w} #{:w :p :y})
;=> #{:r :b}

(clojure.set/intersection #{:r :b :w} #{:w :p :y})
;=> #{:w}

(set [:r :b :r :w :p])
;=> #{:r :b :w :p}

(set {:a 1 :b 2 :c 3})
;=> #{[:c 3] [:b 2] [:a 1]}

(get #{:rabbit :door :watch} :rabbit)
;=> :rabbit
(get #{:rabbit :door :watch} :jar)
;=> nil
; 키워드를 사용해 직접 가져올 수 있다.
(:rabbit #{:rabbit :door :watch})
;=> :rabbit
(#{:rabbit :door :watch} :rabbit)
;=> :rabbit

(contains? #{:rabbit :door :watch} :rabbit)
;=> true
(contains? #{:rabbit :door :watch} :jar)
;=> false

(disj #{:rabbit :door :watch} :rabbit)
;=> #{:door :watch}
----

=== 컬렉션 함수 중 컬렉션 타입에 따라 다른 동작을 하는 함수
* conj
** 컬렉션에 하나 이상의 요소를 추가한다

** 리스트
*** 가장 앞에 요소를 추가한다
** 벡터
*** 가장 뒤에 요소를 추가한다
** 집합
** 요소를 추가한다

[source,clojure]
----
(conj '(:toast :butter :jam) :honey)
;=> (:honey :toast :butter :jam)

(conj [:toast :butter :jam] :honey)
;=> [:toast :butter :jam :honey]

(conj #{:toast :butter :jam} :honey)
;=> #{:toast :butter :jam :honey}
----

=== 리스트는 클로저의 핵심
* 연산자를 리스트에 넣을 수 있다.

[source,clojure]
----
'(+ 1 2)
;=> (+ 1 2)
----

* 모든 클로저의 코드는 데이터의 리스트로 구성되어 있다.

=== 심볼과 바인딩의 기술
* 클로저의 심볼은 값을 가리킨다.
* 심볼이 평가되면 그 심볼이 가리키는 값을 반환한다.
* 심볼은 def로 만들수 있다.


[source,clojure]
----
(def developer "Alice")
;=> #'user/developer'
developer
;=> "Alice"
user/developer
;=> "Alice"
----


** let
*** let 을 사용하면 scope를 생성할 수 있다.
*** let 안에서 사용한 심볼을 let의 바깥에서 사용하려고 하면 오류가 난다.

[source,clojure]
----
(let [developer "Alice in Wonderland"
  rabbit "White Rabbit"]
  [developer rabbit])
;=> ["Alice in Wonderland" "White Rabbit"]
rabbit
;=> CompilerException java.lang.RuntimeException:
----


=== 함수 만들기
* 함수는 defn 으로 만들수 있다.
* 함수의 인자는 vector로 받는다.
* 인자가 없는 함수는 빈벡터([])를 넘겨준다.

[source,clojure]
----
; 인자를 받지 않는 함수
(defn follow-the-rabbit [] "Off we go!")
;=> #'user/follow-the-rabbit
(follow-the-rabbit)
;=> "Off we go!"

; 인자를 받는 함수
(defn shop-for-jams [jam1 jam2]
  {:name "jam-basket"
    :jam1 jam1
    :jam2 jam2})
;=> #'user/shop-for-jams
(shop-for-jams "strawberry" "marmalade")
;=> {:name "jam-basket" :jam1 "strawberry" :jam2 "marmalade"}
----

* 무명함수
** 무명함수를 만드는 방법
*** fn 인수 함수내용 (= def 함수명 (fn 인수 함수내용))
*** (#(함수내용))

[source,clojure]
----
; 무명함수의 주소값을 반환
(fn [] (str "Off we go" "!"))
;=> #object[user$eval...]
; 무명함수를 평가
((fn [] (str "Off we go" "!")))
;=> "Off we go!"

(def follow-again (fn [] (str "Off we go" "!")))
;=> #'user/follow-again
(follow-again)
;=> "Off we go!"

(#(str "Off we go" "!"))
;=> "Off we go!"
; 인수가 있는 경우
(#(str "Off we go" " - " %) "again")
;=> "Off we go - again"
(#(str "Off we go" " - " %1 %2) "again" "!")
;=> "Off we go - again!"
----

=== 이름 공간에서 심볼 관리하기
* 이름공간은 var에 대한 접근을 조작하고 제어하는 방법
* REPL의 default 이름공간은 user
* ns 명령어를 통해 생성하거나 변경이 가능

[source,clojure]
----
(ns alice.favfoods)
;=> nil
; 귀마개(다시바인딩 할 수 있는 것을 표시하는 관례)라고 한다.
*ns*
;=> #object[clojure.lang.Namespace ... "alice.favfoods"]

(def fav-food "strawberry jam")
;=> #'alice.favfoods/fav-food
fav-food
;=> "strawberry jam"
alice.favfoods/fav-food
;=> "strawberry jam"
; 다른 공간으로 전환되면 접근이 불가능하다.
(ns rabbit.favfoods)
;=> nil
fav-food
;=> CompilerException...

; 다른 이름공간의 심볼을 var로 정의
(ns rabbit.favfoods)
;=> nil
(def fav-food "lettuce soup")
;=> #'rabiit.favfoods/fav-food
fav-food
;=> "lettuce soup"
----

* require
** 이름공간을 로딩할 수 있음
** :as 방법을 통해 require의 별칭도 선언 가능
** :refer :all로 이름공간 안에 모든 공개 함수를 참고 가능
** use 함수는 require를 :refer :all 과 함께 쓰는 것과 같다.

[source,clojure]
----
(ns wonderland)
;=> nil
(require '[alice.favfoods :as af])
;=> nil
af/fav-food
;=> "strawberry jam"

; require 키워드 형태로 이용하기
(ns wonderland
  (:require [alice.favfoods :as af]))
af/fav-food
;=> "strawberry jam"

; 같은 함수명을 가진 이름공간을 전부 참조하려고 하면 오류가 남
(ns wonderland
  (:require [alice.favfoods :refer :all]
            [rabbit.favfoods :refer :all]))
;=> IllegalStateException ...

(ns wonderland
  (:require [clojure.set :as s]))
(defn common-fav-foods [food1 food2]
  (let [food-set1 (set food1)
        food-set2 (set food2)
        common-foods (s/intersection food-set1 food-set2)]
   (str "Common Foods: " common-foods)))

(common-fav-foods [:jam :brownies :toast]
                  [:lettuce :carrots :jam])
;=> "Common Foods: #{:jam}"
----

=== 1주 1일차 연습문제
==== 1. link:http://www.4clojure.com/problem/3[문자열 소개 (Intro to Strings)]

[source,clojure]
----
; question
(= ___ (.toUpperCase "hello world"))

; answer
(clojure.string/upper-case "hello world")
----

==== 2. link:http://www.4clojure.com/problem/4[리스트 소개 (Intro to Lists)]

[source,clojure]
----
; question
(= (list ___) '(:a :b :c))

; answer
:a :b :c
----

==== 3. link:http://www.4clojure.com/problem/5[리스트: conj (List: conj)]

[source,clojure]
----
; question
(= ___ (conj '(2 3 4) 1))
(= ___ (conj '(3 4) 1 2))

; answer
(list 1 2 3 4)
----

==== 4. link:http://www.4clojure.com/problem/6[벡터 소개 (Intro to Vectors)]

[source,clojure]
----
; question
(= [___] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))

; answer
:a :b :c
----

==== 5. link:http://www.4clojure.com/problem/7[벡터: conj (Vectors: conj)]

[source,clojure]
----
; question
(= ___ (conj [1 2 3] 4))
(= ___ (conj [1 2] 3 4))

; answer
[1 2 3 4]
----

==== 6. link:http://www.4clojure.com/problem/8[집합 소개 (Intro to Sets)]

[source,clojure]
----
; question
(= ___ (set '(:a :a :b :c :c :c :c :d :d)))
(= ___ (clojure.set/union #{:a :b :c} #{:b :c :d}))

; answer
#{:a :b :c :d}
----

==== 7. link:http://www.4clojure.com/problem/9[집합: conj (Sets: conj)]

[source,clojure]
----
; question
(= #{1 2 3 4} (conj #{1 4 3} ___))

; answer
2
----

==== 8. link:http://www.4clojure.com/problem/10[맵 소개 (Intro to Maps)]

[source,clojure]
----
; question
(= ___ ((hash-map :a 10, :b 20, :c 30) :b))
(= ___ (:b {:a 10, :b 20, :c 30}))

; answer
20
----

==== 9. link:http://www.4clojure.com/problem/11[맵: conj (Maps: conj)]

[source,clojure]
----
; question
(= {:a 1, :b 2, :c 3} (conj {:a 1} ___ [:c 3]))

; answer
[:b 2] or {:b 2}
----

==== 10. link:http://www.4clojure.com/problem/12[시퀀스 소개 (Intro to Sequence)]

[source,clojure]
----
; question
(= ___ (first '(3 2 1)))
(= ___ (second [2 3 4]))
(= ___ (last (list 1 2 3)))

; answer
3
----
