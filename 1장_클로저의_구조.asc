= 클로저의 구조

== 단순값(simple value) 및 리터럴(literal)
* 클로저의 특징
** 다른 언어와 다르게 키워드 라는 타입을 지원한다.
*** 키워드는 컬렉션인 map과 set에서 값을 가져올때 사용하기도 한다.
** 함수나 연산자를 사용할 때 괄호 다음에 바로 함수나 연산자가 먼저 오고 인수는 그 다음에 기재한다.
*** (함수 or 연산자 인수 인수)
** 평가는 괄호()를 사용한다
** 각 항목의 구분은 공백으로 한다

[source,clojure]
----
; 정수
42
;=> 42

; 실수
12.53
;=> 12.53

; 분수
1/3
;=> 1/3

; 다른 타입의 산술 연산은 허용하지 않음
4.0/2
;=> NumberFormatException Invalid number: 4.0/2

; 연산자 사용
(/ 1 3)
;=> 1/3

; 문자열
"jam"
;=> "jam"

; 키워드
:jam
;=> :jam

; 문자 한개
\j
;=> \j

; null
nil
;=> nil
----

== 클로저 데이터를 컬렉션에 담기
* 클로저의 컬렉션 종류
** 리스트
** 벡터
** 맵
** 집합(set)
* 컬렉션의 특징
** 모든 컬렉션은 불변(immutable)이고 종속적(persistent)이다.
** 컬렉션에 변경을 요청해도 새로운 컬렉션을 생성해 리턴한다는 의미

=== 리스트
* '(), (list ) 를 사용해서 선언

[source,clojure]
----
'(1 2 3 4)
;=> (1 2 3 4)

; 콤마(,)도 제공하지만 관용적으로 공백을 사용
'(1,2,3,4)
;=> (1 2 3 4)

list(1 2 3 4)
;=> (1 2 3 4)

; 여러가지 타입의 데이터를 담을 수 있다.
'(1 2 "jam" :marmalade-jar)
;=> (1 2 "jam" :marmalade-jar)
----

==== 리스트로 무엇을 할까?
* first
** 첫번째 요소 가져오기
* rest
** 첫번째 요소 제외하고 나머지 요소를 가져오기
* cons
** 리스트에 요소 추가하기
* last
** 마지막 요소 가져오기 -> 리스트에서는 성능 문제로 잘 사용되지 않는다.
* count
** 개수 가져오기

[source,clojure]
----
; first rest 혼합사용 예제
(first (rest '(:rabbit :pocket-watch :marmalade :door)))
;=> :pocket-watch

; rest 를 끝까지 사용하면??
(first(rest (rest (rest (rest '(:rabbit :pocket-watch :marmalade :door))))))
;=> nil

(cons 5 '())
;=> (5)

(cons 4 (cons 5 nil))
;=> (4 5)

(last '(1 2 3 4))
;=> 4

(count '(1 2 3 4))
;=> 4
----

=== 벡터
* 리스트와 다르게 인덱스 접근할때 유용하게 사용 가능하다.
* 마지막 인자를 접근할때 성능이 좋다.
* 함수 인자는 벡터를 사용하게 되어있다.
* [] 를 사용

* first
** 첫번째 요소 가져오기
* rest
** 첫번째 요소 제외하고 나머지 요소 가져오기
* nth
** 특정 인덱스의 요소를 가져오기
* last
** 마지막 요소 가져오기
* count
** 개수 가져오기

[source,clojure]
----
; 초기화
[:jar1 1 2 3 :jar2]
;=> [:jar1 1 2 3 :jar2]

(first [:jar1 1 2 3 :jar2])
;=> :jar1

(rest [:jar1 1 2 3 :jar2])
;=> [1 2 3 :jar2]

(nth [:jar1 1 2 3 :jar2] 0)
;=> :jar1

(last [:jar1 1 2 3 :jar2])
;=> :jar2

(count [:jar1 1 2 3 :jar2])
;=> 4
----

=== 맵
* 키-값 쌍의 데이터를 저장할 수 있다.
* {}를 사용

** get
*** keyword 를 사용해 값을 가져올수도 있다
** keys
*** key의 리스트를 리턴
** vals
*** 값의 리스트를 리턴
** assoc
*** 특정 키의 값을 갱신
** dissoc
*** 특정 키를 제거
** merge
*** 여러 맵을 합침

[source,clojure]
----
{:jam1 "strawberry" :jam2 "blackberry"}
;=> {:jam1 "strawberry", :jam2 "blackberry"}

(get {:jam1 "strawberry" :jam2 "blackberry"} :jam2)
;=> "blackberry"
; 키가 없을때
(get {:jam1 "strawberry" :jam2 "blackberry"} :jam3)
;=> "not found"

; 키를 keyword를 사용해 가져오기
(:jam2 {:jam1 "strawberry" :jam2 "blackberry"})
;=> "blackberry"

(keys {:jam1 "strawberry" :jam2 "blackberry"})
;=> (:jam1 :jam2)

(vals {:jam1 "strawberry" :jam2 "blackberry"})
;=> ("strawberry" "blackberry")

(assoc {:jam1 "strawberry" :jam2 "blackberry"} :jam3 "orange")
;=> {:jam1 "strawberry", :jam2 "blackberry", jam3 "orange"}

(dissoc {:jam1 "strawberry" :jam2 "blackberry"} :jam2)
;=> {:jam1 "strawberry"}

(merge {:jam1 "strawberry" :jam2 "blackberry"}
       {:jam1 "orange" :jam3 "red"}
       {:jam4 "blue"})
;=> {:jam1 "orange", :jam2 "blackberry", :jam3 "red", :jam4 "blue"}
----

=== 집합
* 중복이 없는 컬렉션
* #{} 를 사용해 선언

[source,clojure]
----
----

=== 컬렉션 함수 중 컬렉션 타입에 따라 다른 동작을 하는 함수
* conj
** 컬렉션에 하나 이상의 요소를 추가한다

** 리스트
*** 가장 앞에 요소를 추가한다
** 벡터
*** 가장 뒤에 요소를 추가한다
** 집합
** 요소를 추가한다

[source,clojure]
----
(conj '(:toast :butter :jam) :honey)
;=> (:honey :toast :butter :jam)

(conj [:toast :butter :jam] :honey)
;=> [:toast :butter :jam :honey]

(conj #{:toast :butter :jam} :honey)
;=> #{:toast :butter :jam :honey}
----

=== 리스트는 클로저의 핵심
* 연산자를 리스트에 넣을 수 있다.

[source,clojure]
----
'(+ 1 2)
;=> (+ 1 2)
----

* 모든 클로저의 코드는 데이터의 리스트로 구성되어 있다.

=== 심볼과 바인딩의 기술

=== 함수 만들기

=== 1주 1일차 연습문제
